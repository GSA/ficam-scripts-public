Function set-ADUG-CertIssOID {
  param($IssuancePolicyOID, $IssuancePolicyName)

# Written by Tim Baldridge, 8 June 2012
# Modified by Tim Baldridge, 30 August 2015 - Changed Function Name
#
# This script will create, if it does not already exist, a Universal Group of name $IssuancePolicyName at the 
# path OU=Groups,OU=Administrators, <domain>, the <domain> is dynamically determined domain components of the form DC=xyx, DC=mil, etc..
#
# It will also create the OID object, if it does not exist, and set the OID object name attributes not set by certutil.
#
# The group name must resolve uniquely and is created as a Universal Security Group, 
# then the OID object is configured for the Authentication Mechanisim Assurance link.
# 
# This function may be invoked multiple times for the same OID, Name pair. The objects are not recreated but critical setting are 
# repeated so this can be used to repair broken linkages.
#
# This script has a list of policy OIDs that will be loaded. 
# You should verify that the policy is applicable to your implementation.
# 
# An example is below.
# set-ADUG-CertIssOID 2.16.840.1.101.3.2.1.3.13 id-fpki-common-authentication
#
# You may have to change the powershell script execution policy to execute this script or 
# sign the script to execute it after downloading.

  begin {
     # Assumption:  The group to which the Issuance Policy is going 
     #              to be linked is (or is going to be created) in 
     #              the domain the user running this script is a member of.
     import-module ActiveDirectory
     $root = get-adrootdse
     $domain = get-addomain -current loggedonuser
     $searchBase = [String]$root.configurationnamingcontext

     $Path = "OU=Groups,OU=Administrators,$domain"
     $Description = "AD Authentication Mechanism Assurance"

     $AdminOUpath = Get-ADOrganizationalUnit -Filter 'Name -like "Administrators"' -SearchBase $domain -SearchScope 1
     if ($AdminOUpath -eq $null) {
        New-ADOrganizationalUnit -Name Administrators -Path "$domain"
        $AdminOUpath = Get-ADOrganizationalUnit -Filter 'Name -like "Administrators"'
        Write "Created $AdminOUpath"
       }

     $Groupspath = Get-ADOrganizationalUnit -Filter 'Name -like "Groups"' -SearchBase $AdminOUpath -SearchScope 1
     if ($Groupspath -eq $null) {
        New-ADOrganizationalUnit -Name Groups -Path "$AdminOUpath"
        $Groupspath = Get-ADOrganizationalUnit -Filter 'Name -like "Groups"'
        Write "Created $Groupspath"
       }

  }

  process { 

     $Group = get-adobject -Filter { (name -eq $IssuancePolicyName) -and (objectClass -eq "group")} -SearchBase $Groupspath -SearchScope 1
     if ($Group -ne $null) {

           #######################################
           ##  Verify that the group is         ##
           ##  Universal, Security, and         ## 
           ##  has no members                   ##
           #######################################
           
           if ($group.GroupScope -ne "Universal") {
           $tmp = $ErrorMsg.ErrorNotUniversal -f $IssuancePolicyName, $groupName
           write-host $tmp -ForeGroundColor Red
           break;
           }
           if ($group.GroupCategory -ne "Security") {
           $tmp = $ErrorMsg.ErrorNotSecurity -f $IssuancePolicyName, $groupName
           write-host $tmp -ForeGroundColor Red
           break;
           }
           $members = Get-ADGroupMember -Identity $group
           if ($members -ne $null) {
           $tmp = $ErrorMsg.ErrorHasMembers -f $IssuancePolicyName, $groupName
           write-host $tmp -ForeGroundColor Red
           foreach ($member in $members) {write-host "   $member.name" -ForeGroundColor Red}
           break;
           }
         }


     if ($Group -eq $null) {
           New-ADGroup -Name "$IssuancePolicyName" -SamAccountName "$IssuancePolicyName" -Description $Description -GroupCategory Security -GroupScope Universal -DisplayName "$IssuancePolicyName" -Path $Groupspath
           $Group = get-adobject -Filter { (name -eq $IssuancePolicyName) -and (objectClass -eq "group")}
           Write "Created $Group"
         }

     $OID = get-adobject -searchBase $searchBase -Filter { (msPKI-Cert-Template-OID -eq $IssuancePolicyOID) -and (objectClass -eq "msPKI-Enterprise-Oid")} -properties *
     if ($OID -eq $null) {
           $command = {certutil -f -oid $IssuancePolicyOID $IssuancePolicyName 1033 2}
           invoke-command -scriptblock $command
           $OID = get-adobject -searchBase $searchBase -Filter { (msPKI-Cert-Template-OID -eq $IssuancePolicyOID) -and (objectClass -eq "msPKI-Enterprise-Oid")} -properties *
           Write "Created $OID"
         }


     if (($OID -ne $null) -and ($Group -ne $null) ) {
           $tmp = @{'displayName'= $IssuancePolicyName}
           set-adobject -Identity $OID -Add $tmp
           $tmp = @{ 'msDS-OIDToGroupLink'= $Group.DistinguishedName}
           set-adobject -Identity $OID -Add $tmp
           Write "AD AMA set for $IssuancePolicyOID  $IssuancePolicyName"
        }

  }

  end { 

    }
}

# Common
set-ADUG-CertIssOID 2.16.840.1.101.3.2.1.3.13 id-fpki-common-authentication
set-ADUG-CertIssOID 2.16.840.1.101.3.2.1.3.16 id-fpki-common-high
set-ADUG-CertIssOID 2.16.840.1.101.3.2.1.3.40 id-fpki-common-derived-pivAuth
set-ADUG-CertIssOID 2.16.840.1.101.3.2.1.3.41 id-fpki-common-derived-pivAuth-hardware

########################################################################
